// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package arbitrarymethod

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallAnyServiceClient is the client API for CallAnyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallAnyServiceClient interface {
	CallAny(ctx context.Context, in *CallAnyRequest, opts ...grpc.CallOption) (*CallAnyResponse, error)
}

type callAnyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallAnyServiceClient(cc grpc.ClientConnInterface) CallAnyServiceClient {
	return &callAnyServiceClient{cc}
}

func (c *callAnyServiceClient) CallAny(ctx context.Context, in *CallAnyRequest, opts ...grpc.CallOption) (*CallAnyResponse, error) {
	out := new(CallAnyResponse)
	err := c.cc.Invoke(ctx, "/arbitrarymethod.CallAnyService/CallAny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallAnyServiceServer is the server API for CallAnyService service.
// All implementations must embed UnimplementedCallAnyServiceServer
// for forward compatibility
type CallAnyServiceServer interface {
	CallAny(context.Context, *CallAnyRequest) (*CallAnyResponse, error)
	mustEmbedUnimplementedCallAnyServiceServer()
}

// UnimplementedCallAnyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCallAnyServiceServer struct {
}

func (UnimplementedCallAnyServiceServer) CallAny(context.Context, *CallAnyRequest) (*CallAnyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallAny not implemented")
}
func (UnimplementedCallAnyServiceServer) mustEmbedUnimplementedCallAnyServiceServer() {}

// UnsafeCallAnyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallAnyServiceServer will
// result in compilation errors.
type UnsafeCallAnyServiceServer interface {
	mustEmbedUnimplementedCallAnyServiceServer()
}

func RegisterCallAnyServiceServer(s grpc.ServiceRegistrar, srv CallAnyServiceServer) {
	s.RegisterService(&CallAnyService_ServiceDesc, srv)
}

func _CallAnyService_CallAny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallAnyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallAnyServiceServer).CallAny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrarymethod.CallAnyService/CallAny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallAnyServiceServer).CallAny(ctx, req.(*CallAnyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallAnyService_ServiceDesc is the grpc.ServiceDesc for CallAnyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallAnyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arbitrarymethod.CallAnyService",
	HandlerType: (*CallAnyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallAny",
			Handler:    _CallAnyService_CallAny_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/arbitrarymethod/arbitrarymethod.proto",
}
